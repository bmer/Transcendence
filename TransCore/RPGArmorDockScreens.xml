<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- ARMOR MANAGEMENT SCREEN ===================================================

	This screen allows the player to repair and upgrade armor at a station. It 
	requires the station to use the <RepairArmor> directive in its <Trade> 
	section.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.
	
	'noUpgrade: If True, do not offer to see upgrades.
	
	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageArmor;"
			type=				"armorSelector"
			inherit=			"&dsRPGDockServicesBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aI"

			initialItem="=(block (
				(desiredSeg (scrGetData gScreen 'armorSeg))
				(seg
					(switch
						(not (scrGetItem gScreen))
							'shields
							
						(itmMatches (scrGetItem gScreen) 's)
							'shields
							
						(itmGetArmorInstalledLocation (scrGetItem gScreen))
						)
					)
				)

				(or (not desiredSeg) (eq seg desiredSeg))
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						(actionStatus Nil)
						)
						
						(switch
							;	If no item is selected we assume that we have an empty
							;	shield generator slot.
							
							(not theItem)
								(block (
									(desc Nil)
									(canInstall Nil)
									)
									
									(scrSetControlValue gScreen 'currentItem {
										title: "Shield Generator Slot"
										desc: "Your ship does not have a shield generator installed."
										})
									
									;	Remember that we have the shield generator selected

									(scrSetData gScreen 'armorSeg 'shields)
									
									;	Install action
									
									(setq actionStatus (rpgCalcDockServiceInstallAction gSource theShip { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionInstall (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionInstall (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionInstall (@ actionStatus 'desc))
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
									
									;	Enable/disable various actions
								
									(scrShowAction gScreen 'actionRepair Nil)
									(scrShowAction gScreen 'actionReplace Nil)
									(scrShowAction gScreen 'actionDisable Nil)
									(scrShowAction gScreen 'actionEnable Nil)
									(scrShowAction gScreen 'actionRemove Nil)
									)
								
							;	If this is the shield generator...
							
							(eq (itmGetProperty theItem 'category) 'shields)
								(block (
									;	Shield state
									
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									
									(desc Nil)
									(canEnable Nil)
									(canDisable Nil)
									)
									
									(setq desc (cat (itmGetName theItem 0x0021) " installed."))
									
									;	Set the description
								
									(scrSetControlValue gScreen 'currentItem {
										source: gPlayerShip
										item: theItem
										})
									
									;	Remember that we have the shield generator selected

									(scrSetData gScreen 'armorSeg 'shields)
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
									
									;	Replace action
									
									(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
								
									;	Remove action
									
									(setq actionStatus (rpgCalcDockServiceRemoveAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionRemove (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionRemove (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionRemove (@ actionStatus 'desc))
									(scrSetData gScreen 'costToRemove (@ actionStatus 'cost))
								
									;	Enable/disable various actions
								
									(scrShowAction gScreen 'actionRepair Nil)
									(scrShowAction gScreen 'actionDisable isEnabled)
									(scrShowAction gScreen 'actionEnable (not isEnabled))
									(scrShowAction gScreen 'actionInstall Nil)
									)
									
							;	Otherwise, we expect armor...
							
							(block (
								)
								
								; Remember the armor segment so that we can come back to 
								; this same selection (e.g., when we go to replace armor)

								(scrSetData gScreen 'armorSeg (itmGetArmorInstalledLocation theItem))
								
								;	Repair armor action
								
								(setq actionStatus (rpgCalcDockServiceRepairAction gSource theShip theItem { category:'armor }))
								(scrShowAction gScreen 'actionRepair (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionRepair (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionRepair (@ actionStatus 'desc))
								(scrSetData gScreen 'costToRepair (@ actionStatus 'cost))
								
								;	Do we have any armor segments in cargo hold that we can use
								;	to replace this armor?
								
								(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem { category:'armor criteria:"aU" }))
								(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
								
								;	Upgrade action
									
								(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem { category:'armor criteria:"aU" }))
								(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
								(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
								
								;	Set the description
								
								(scrSetControlValue gScreen 'currentItem {
									source: gPlayerShip
									item: theItem
									})
								
								;	Enable/disable various actions
								
								(scrShowAction gScreen 'actionDisable Nil)
								(scrShowAction gScreen 'actionEnable Nil)
								(scrShowAction gScreen 'actionRemove Nil)
								(scrShowAction gScreen 'actionInstall Nil)
								)
							)
							
						;	Page Down goes to the next page (either weapons or misc devices)
						
						(scrShowAction gScreen 'actionDonePgUp (@ gData 'doubleExit))
						(scrShowAction gScreen 'actionManageWeapons (@ gData 'manageWeapons))
						(scrShowAction gScreen 'actionManageMiscDevices (and (@ gData 'manageMiscDevices) (not (@ gData 'manageWeapons))))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionRepair">
						(block Nil
							(objRepairArmor gPlayerShip (scrGetItem gScreen))
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) (scrGetData gScreen 'costToRepair))
							(typSetData &svPlayer; 'tutorialRepaired True)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionUpgrade">
						(switch
							;	If this is an armor item, then offer to sell an upgrade
							
							(itmMatches (scrGetItem gScreen) "a")
								(scrShowScreen gScreen &dsRPGUpgradeArmor; {
									armorSeg: (scrGetData gScreen 'armorSeg)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
									
							;	Otherwise, assume shields
							
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: "sUN"
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: "sUN"
							checkMilitaryID: (@ gData 'checkMilitaryID)
							})
					</Action>
					
					<Action id="actionReplace">
						(switch
							;	If this is an armor item, then offer to replace it.
							
							(itmMatches (scrGetItem gScreen) "a")
								(scrShowScreen gScreen &dsRPGReplaceArmor; {
									armorSeg: (scrGetData gScreen 'armorSeg)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
									
							;	If shields, replace
							
							(itmMatches (scrGetItem gScreen) "s")
								(scrShowScreen gScreen &dsRPGInstallDevice; {
									criteria: "sUN"
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
							)
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowPane gScreen "RemoveDevice")
					</Action>
					
					
					<Action id="actionDonePgUp" minor="true">
						(scrExitScreen gScreen)
					</Action>
					<Action id="actionManageWeapons" minor="true">
						(block Nil
							(scrExitScreen gScreen)
							(scrShowScreen gScreen &dsRPGManageWeapons; {
								checkMilitaryID: (@ gData 'checkMilitaryID)
								noUpgrade: (@ gData 'noUpgrade)
								upgradeInstallOnly: (@ gData 'upgradeInstallOnly)
								
								manageArmor: True
								manageMiscDevices: (@ gData 'manageMiscDevices)
								doubleExit: (@ gData 'doubleExit)
								})
							)
					</Action>
					<Action id="actionManageMiscDevices" minor="true">
						(block Nil
							(scrExitScreen gScreen)
							(scrShowScreen gScreen &dsRPGManageMiscDevices; {
								checkMilitaryID: (@ gData 'checkMilitaryID)
								noUpgrade: (@ gData 'noUpgrade)
								upgradeInstallOnly: (@ gData 'upgradeInstallOnly)
								
								manageArmor: True
								manageWeapons: (@ gData 'manageWeapons)
								doubleExit: (@ gData 'doubleExit)
								})
							)
					</Action>
					<Action id="actionDone" minor="true">
						(block (
							(doubleExit (@ gData 'doubleExit))
							)
							
							(scrExitScreen gScreen)
							(if doubleExit
								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionDone">"[Escape] Done"</Text>
			<Text id="actionDonePgUp">"[PageUp] Dock Services"</Text>
			<Text id="actionDisable">"Disa[b]le"</Text>
			<Text id="actionEnable">"Ena[b]le"</Text>
			<Text id="actionInstall">"[I]nstall"</Text>
			<Text id="actionManageMiscDevices">"[PageDown] Miscellaneous Devices"</Text>
			<Text id="actionManageWeapons">"[PageDown] Weapons"</Text>
			<Text id="actionRemove">"Remo[v]e"</Text>
			<Text id="actionRepair">"[R]epair"</Text>
			<Text id="actionReplace">"Re[p]lace"</Text>
			<Text id="actionUpgrade">"Buy [U]pgrade"</Text>
			
			<Text id="descArmorNotDamaged">(cat "The ship's " (@ gData 'armorNoun) " is not damaged.")</Text>
			<Text id="descArmorNoTech">(cat "The ship's " (@ gData 'armorNoun) " cannot be repaired. The technology required is not available at this station.")</Text>
			<Text id="descArmorCantRepair">(cat "The ship's " (@ gData 'armorNoun) " cannot be repaired at this station.")</Text>
			<Text id="descArmorTooMuchDamage">(cat "The ship's " (@ gData 'armorNoun) " is heavily damaged and cannot be repaired.")</Text>
			<Text id="descArmorCantAfford">(cat "The ship's " (@ gData 'armorNoun) " can be repaired for " (@ gData 'cost) ", which, unfortunately, is more than you can afford.")</Text>
			<Text id="descArmorFreeRepair">(cat "The ship's " (@ gData 'armorNoun) " is damaged and can be repaired free of charge.")</Text>
			<Text id="descArmorRepair">(cat "The ship's " (@ gData 'armorNoun) " is damaged and will cost " (@ gData 'cost) " to repair.")</Text>
		</Language>
	</DockScreen>
	
<!-- MISC DEVICES MANAGEMENT SCREEN ============================================

	This screen allows the player to install miscellaneous devices, including
	reactor, drive, and cargo hold.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageMiscDevices;"
			type=				"miscSelector"
			inherit=			"&dsRPGDockServicesBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"d~wsI"
			initialItem="=(block (
			
				;	deviceSelected is a struct with one of the following fields:
				;		slotPosIndex: This means we should select a slot of 
				;			this index.
				;		installPos: This means we should select a device in this
				;			install position.
				;		installCategory: This means we should select a device 
				;			with this category (or an empty slot with this
				;			category).
				;		oldSlots: This means that we select the item that was
				;			most recently installed (and thus is NOT on this list
				;			of old devices).
				
				(deviceSelected (scrGetData gScreen 'deviceSelected))
				
				;	If none of the player's devices are installed in one of the
				;	oldSlots, then it means that we cancelled installation/upgrade
				
				(cancelled 
					(and (@ deviceSelected 'oldSlots)
						(not (filter (objGetItems gPlayerShip &quot;d~wsI&quot;) theItem
							(not (find (@ deviceSelected 'oldSlots) (itmGetInstallPos theItem)))
							))
						)
					)
				)
				
				(switch
					(not deviceSelected)
						True
						
					(and (not cancelled) (@ deviceSelected 'oldSlots))
						(and (scrGetItem gScreen) 
							(not (find (@ deviceSelected 'oldSlots) (itmGetInstallPos (scrGetItem gScreen))))
							)
							
					(@ deviceSelected 'slotPosIndex)
						(eq (@ deviceSelected 'slotPosIndex) (if (not (scrGetItem gScreen)) (@ (scrGetListEntry gScreen) 'slotPosIndex)))
						
					(@ deviceSelected 'installPos)
						(eq (@ deviceSelected 'installPos) (if (scrGetItem gScreen) (itmGetInstallPos (scrGetItem gScreen))))
						
					(@ deviceSelected 'installCategory)
						(eq (@ deviceSelected 'installCategory) (if (scrGetItem gScreen) (itmGetProperty (scrGetItem gScreen) 'category) (@ (scrGetListEntry gScreen) 'category)))
						
					True
					)
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						
						(canDisable Nil)
						(canEnable Nil)
						(canInstall Nil)
						
						(deviceTable {
							cargoHold: {
								category: 'cargoHold
								criteria: "cUN"
								}
								
							device: {
								category: 'device
								criteria: "d~wscrv UN"
								}
								
							drive: {
								category: 'drive
								criteria: "vUN"
								}
								
							reactor: {
								category: 'reactor
								criteria: "rUN"
								}
							})
							
						(category (if theItem (itmGetProperty theItem 'category) (@ (scrGetListEntry gScreen) 'category)))
						(categoryDesc (@ deviceTable category))
						(actionStatus Nil)
						)
						
						(scrSetData gScreen 'categoryCriteria (@ categoryDesc 'criteria))
						
						;	Figure out desc, etc.
						
						(switch
							;	If we have an item then this is an installed device

							theItem
								(block (
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									)
								
									(scrSetControlValue gScreen 'currentItem {
										source: theShip
										item: theItem
										})
										
									;	Remember selection
									
									(scrSetData gScreen 'deviceSelected { installPos:(itmGetInstallPos theItem) })
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
									
									;	Remove action
									
									(setq actionStatus (rpgCalcDockServiceRemoveAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionRemove (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionRemove (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionRemove (@ actionStatus 'desc))
									(scrSetData gScreen 'costToRemove (@ actionStatus 'cost))
									
									;	Replace action
									
									(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
									
									;	Enable disable?

									(if (objGetItemProperty theShip theItem 'canBeDisabled)
										(block Nil
											(setq canDisable isEnabled)
											(setq canEnable (not isEnabled))
											)
										)
										
									(scrShowAction gScreen 'actionInstall Nil)
									)
									
							;	Otherwise, this is an empty slot, so we display something
							;	based on the item category
							
							(block (
								)
								
								;	Set description
								
								(scrSetControlValue gScreen 'currentItem {
									title: (scrTranslate gScreen (cat "slotTitle:" category))
									desc: (scrTranslate gScreen (cat "slotDesc:" category) {
										slotsAvail: (objGetProperty theShip 'availableNonWeaponSlots)
										})
									})
									
								;	Remember selection
									
								(scrSetData gScreen 'deviceSelected { slotPosIndex:(@ (scrGetListEntry gScreen) 'slotPosIndex) })
								
								;	Upgrade action
									
								(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
								(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
								(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
								
								;	Install action
									
								(setq actionStatus (rpgCalcDockServiceInstallAction gSource theShip categoryDesc))
								(scrShowAction gScreen 'actionInstall (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionInstall (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionInstall (@ actionStatus 'desc))
								
								(scrShowAction gScreen 'actionRemove Nil)
								(scrShowAction gScreen 'actionReplace Nil)
								)
							)
							
						;	Enable/disable various actions
								
						(scrShowAction gScreen 'actionDisable canDisable)
						(scrShowAction gScreen 'actionEnable canEnable)

						;	Show the previous action (either weapons or armor)
						
						(scrShowAction gScreen 'actionManageWeapons (@ gData 'manageWeapons))
						(scrShowAction gScreen 'actionManageArmor (and (@ gData 'manageArmor) (not (@ gData 'manageWeapons))))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionUpgrade">
						(block Nil
							(if (not (scrGetItem gScreen))
								(scrSetData gScreen 'deviceSelected 
									{ 
										oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
										slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
										}
									)
								)
								
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(block Nil
							;	On return, select either the newly installed item 
							;	or the original slot.
							(scrSetData gScreen 'deviceSelected 
								{ 
									oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
									slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
									}
								)
						
							(scrShowScreen gScreen &dsRPGInstallDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								})
							)
					</Action>
					
					<Action id="actionReplace">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: (scrGetData gScreen 'categoryCriteria)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							replaceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowPane gScreen "RemoveDevice")
					</Action>
					
					<Action id="actionManageArmor" minor="true">
						(block Nil
							(scrExitScreen gScreen)
							(scrShowScreen gScreen &dsRPGManageArmor; {
								checkMilitaryID: (@ gData 'checkMilitaryID)
								noUpgrade: (@ gData 'noUpgrade)
								upgradeInstallOnly: (@ gData 'upgradeInstallOnly)
							
								manageMiscDevices: True
								manageWeapons: (@ gData 'manageWeapons)
								doubleExit: (@ gData 'doubleExit)
								})
							)
					</Action>
					<Action id="actionManageWeapons" minor="true">
						(block Nil
							(scrExitScreen gScreen)
							(scrShowScreen gScreen &dsRPGManageWeapons; {
								checkMilitaryID: (@ gData 'checkMilitaryID)
								noUpgrade: (@ gData 'noUpgrade)
								upgradeInstallOnly: (@ gData 'upgradeInstallOnly)
								
								manageArmor: (@ gData 'manageArmor)
								manageMiscDevices: True
								doubleExit: (@ gData 'doubleExit)
								})
							)
					</Action>
					<Action id="actionDone" minor="true">
						(block (
							(doubleExit (@ gData 'doubleExit))
							)
							
							(scrExitScreen gScreen)
							(if doubleExit
								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionDisable">"Disa[b]le"</Text>
			<Text id="actionDone">"[Escape] Done"</Text>
			<Text id="actionEnable">"Ena[b]le"</Text>
			<Text id="actionInstall">"[I]nstall"</Text>
			<Text id="actionManageArmor">"[PageUp] Armor and Shields"</Text>
			<Text id="actionManageWeapons">"[PageUp] Weapons"</Text>
			<Text id="actionRemove">"Remo[v]e"</Text>
			<Text id="actionReplace">"Re[p]lace"</Text>
			<Text id="actionUpgrade">"Buy [U]pgrade"</Text>
			
			<Text id="descItemInstalled">
				(cat
					(itmGetName (@ gData 'item) 0x0021) " installed."
					)
			</Text>
			
			<Text id="slotTitle:cargoHold">"Cargo Expansion Slot"</Text>
			<Text id="slotDesc:cargoHold">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for a cargo expansion. "
							"(However, some devices do not require a free slot to be installed.)"
							)
							
					(cat
						"Your ship does not have a cargo expansion installed.\n\n"
					
						"Cargo expansions can be installed to increase the carrying "
						"capacity of your ship."
						)
					)
			</Text>
			
			<Text id="slotTitle:device">"Device Slot"</Text>
			<Text id="slotDesc:device">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for miscellaneous devices. "
							"(However, some devices do not require a free slot to be installed.)"
							)
							
					(eq (@ gData 'slotsAvail) 1)
						(cat
							"Your ship has a free slot available for installing miscellaneous "
							"devices."
							)
							
					(cat
						"Your ship has " (@ gData 'slotsAvail) " free slots available for installing miscellaneous "
						"devices."
						)
					)
			</Text>
			
			<Text id="slotTitle:drive">"Drive Upgrade Slot"</Text>
			<Text id="slotDesc:drive">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for a drive upgrade. "
							"(However, some devices do not require a freee slot to be installed.)"
							)
							
					(cat
						"Your ship does not have a drive upgrade installed.\n\n"
					
						"Drive upgrades can be installed to increase the thrust and velocity "
						"of your ship."
						)
					)
			</Text>
			
			<Text id="slotTitle:reactor">"Reactor Slot"</Text>
			<Text id="slotDesc:reactor">"Your ship does not have a reactor installed."</Text>
		</Language>
	</DockScreen>
	
<!-- WEAPONS MANAGEMENT SCREEN =================================================

	This screen allows the player to install weapons.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageWeapons;"
			type=				"weaponsSelector"
			inherit=			"&dsRPGDockServicesBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"wI"
			initialItem="=(block (
			
				;	deviceSelected is a struct with one of the following fields:
				;		slotPosIndex: This means we should select a slot of 
				;			this slot position.
				;		installPos: This means we should select a device in this
				;			install position.
				;		installCategory: This means we should select a device 
				;			with this category (or an empty slot with this
				;			category).
				;		oldSlots: This means that we select the item that was
				;			most recently installed (and thus is NOT on this list
				;			of old devices).
				
				(deviceSelected (scrGetData gScreen 'deviceSelected))
				
				;	If none of the player's devices are installed in one of the
				;	oldSlots, then it means that we cancelled installation/upgrade
				
				(cancelled 
					(and (@ deviceSelected 'oldSlots)
						(not (filter (objGetItems gPlayerShip &quot;wI&quot;) theItem
							(not (find (@ deviceSelected 'oldSlots) (itmGetInstallPos theItem)))
							))
						)
					)
				)

				(switch
					(not deviceSelected)
						True
						
					(and (not cancelled) (@ deviceSelected 'oldSlots))
						(and (scrGetItem gScreen) 
							(not (find (@ deviceSelected 'oldSlots) (itmGetInstallPos (scrGetItem gScreen))))
							)
							
					(@ deviceSelected 'slotPosIndex)
						(eq (@ deviceSelected 'slotPosIndex) (if (not (scrGetItem gScreen)) (@ (scrGetListEntry gScreen) 'slotPosIndex)))
						
					(@ deviceSelected 'installPos)
						(eq (@ deviceSelected 'installPos) (if (scrGetItem gScreen) (itmGetInstallPos (scrGetItem gScreen))))
						
					(@ deviceSelected 'installCategory)
						(eq (@ deviceSelected 'installCategory) (if (scrGetItem gScreen) (itmGetProperty (scrGetItem gScreen) 'category) (@ (scrGetListEntry gScreen) 'category)))
						
					True
					)
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)

						(requiresAmmo Nil)
						(canBuyAmmo Nil)
						(canDisable Nil)
						(canEnable Nil)
						(canInstall Nil)
						
						(deviceTable {
							weapon: {
								category: 'weapon
								criteria: "pUN"
								ammoLabel: "actionBuyAmmo"
								}
								
							launcher: {
								category: 'launcher
								criteria: "lUN"
								ammoLabel: "actionBuyMissiles"
								}
							})
							
						(category (if theItem (itmGetProperty theItem 'category) (@ (scrGetListEntry gScreen) 'category)))
						(categoryDesc (@ deviceTable category))
						)
						
						(scrSetData gScreen 'categoryCriteria (@ categoryDesc 'criteria))
						
						;	Figure out desc, etc.
						
						(switch
							;	If we have an item then this is an installed device

							theItem
								(block (
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									(actionStatus Nil)
									)
								
									(scrSetControlValue gScreen 'currentItem {
										source: theShip
										item: theItem
										})
										
									;	Remember selection
									
									(scrSetData gScreen 'deviceSelected { installPos:(itmGetInstallPos theItem) })
									
									;	Buy ammo action
									
									(setq actionStatus (rpgCalcDockServiceBuyAmmo gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionBuyAmmo (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionBuyAmmo (@ actionStatus 'enabled))
									(scrSetActionLabel gScreen 'actionBuyAmmo (scrTranslate gScreen (@ categoryDesc 'ammoLabel)))
									(scrSetActionDesc gScreen 'actionBuyAmmo (@ actionStatus 'desc))
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
										
									;	Remove action
									
									(setq actionStatus (rpgCalcDockServiceRemoveAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionRemove (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionRemove (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionRemove (@ actionStatus 'desc))
									(scrSetData gScreen 'costToRemove (@ actionStatus 'cost))
									
									;	Replace action
									
									(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
									
									;	Enable disable?

									(if (objGetItemProperty theShip theItem 'canBeDisabled)
										(block Nil
											(setq canDisable isEnabled)
											(setq canEnable (not isEnabled))
											)
										)
										
									(scrShowAction gScreen 'actionInstall Nil)
									)
									
							;	Otherwise, this is an empty slot, so we display something
							;	based on the item category
							
							(block (
								)
								
								;	Set description
								
								(scrSetControlValue gScreen 'currentItem {
									title: (scrTranslate gScreen (cat "slotTitle:" category))
									desc: (scrTranslate gScreen (cat "slotDesc:" category) {
										slotsAvail: (objGetProperty theShip 'availableWeaponSlots)
										})
									})
									
								;	Remember selection
									
								(scrSetData gScreen 'deviceSelected { slotPosIndex:(@ (scrGetListEntry gScreen) 'slotPosIndex) })
								
								;	Cannot buy ammo/missiles
								
								(scrShowAction gScreen 'actionBuyAmmo Nil)
						
								;	Upgrade action
									
								(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
								(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
								(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))

								;	Install action
									
								(setq actionStatus (rpgCalcDockServiceInstallAction gSource theShip categoryDesc))
								(scrShowAction gScreen 'actionInstall (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionInstall (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionInstall (@ actionStatus 'desc))
								
								(scrShowAction gScreen 'actionRemove Nil)
								(scrShowAction gScreen 'actionReplace Nil)
								)
							)
							
						;	Enable/disable various actions
								
						(scrShowAction gScreen 'actionDisable canDisable)
						(scrShowAction gScreen 'actionEnable canEnable)

						;	Page up/page down
						
						(scrShowAction gScreen 'actionManageArmor (@ gData 'manageArmor))
						(scrShowAction gScreen 'actionManageMiscDevices (@ gData 'manageMiscDevices))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionBuyAmmo">
						(scrShowScreen gScreen &dsRPGCommoditiesExchangeBuy; {
							checkMilitaryID: (@ gData 'checkMilitaryID)
							criteria: (cat "m +launchedBy:" (itmGetType (scrGetItem gScreen)) ";")
							})
					</Action>
					
					<Action id="actionUpgrade">
						(block Nil
							(if (not (scrGetItem gScreen))
								(scrSetData gScreen 'deviceSelected 
									{ 
										oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
										slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
										}
									)
								)
								
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(block Nil
							;	On return, select either the newly installed item 
							;	or the original slot.
							(scrSetData gScreen 'deviceSelected 
								{ 
									oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
									slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
									}
								)
						
							(scrShowScreen gScreen &dsRPGInstallDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								})
							)
					</Action>
					
					<Action id="actionReplace">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: (scrGetData gScreen 'categoryCriteria)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							replaceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowPane gScreen "RemoveDevice")
					</Action>
					
					<Action id="actionManageArmor" minor="true">
						(block Nil
							(scrExitScreen gScreen)
							(scrShowScreen gScreen &dsRPGManageArmor; {
								checkMilitaryID: (@ gData 'checkMilitaryID)
								noUpgrade: (@ gData 'noUpgrade)
								upgradeInstallOnly: (@ gData 'upgradeInstallOnly)
							
								manageMiscDevices: (@ gData 'manageMiscDevices)
								manageWeapons: True
								doubleExit: (@ gData 'doubleExit)
								})
							)
					</Action>
					<Action id="actionManageMiscDevices" minor="true">
						(block Nil
							(scrExitScreen gScreen)
							(scrShowScreen gScreen &dsRPGManageMiscDevices; {
								checkMilitaryID: (@ gData 'checkMilitaryID)
								noUpgrade: (@ gData 'noUpgrade)
								upgradeInstallOnly: (@ gData 'upgradeInstallOnly)
								
								manageArmor: (@ gData 'manageArmor)
								manageWeapons: True
								doubleExit: (@ gData 'doubleExit)
								})
							)
					</Action>
					<Action id="actionDone" minor="true">
						(block (
							(doubleExit (@ gData 'doubleExit))
							)
							
							(scrExitScreen gScreen)
							(if doubleExit
								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionBuyAmmo">"Buy [A]mmo"</Text>
			<Text id="actionBuyMissiles">"Buy [M]issiles"</Text>
			<Text id="actionDisable">"Disa[b]le"</Text>
			<Text id="actionDone">"[Escape] Done"</Text>
			<Text id="actionEnable">"Ena[b]le"</Text>
			<Text id="actionInstall">"[I]nstall"</Text>
			<Text id="actionManageArmor">"[PageUp] Armor and Shields"</Text>
			<Text id="actionManageMiscDevices">"[PageDown] Miscellaneous Devices"</Text>
			<Text id="actionRemove">"Remo[v]e"</Text>
			<Text id="actionReplace">"Re[p]lace"</Text>
			<Text id="actionUpgrade">"Buy [U]pgrade"</Text>
			
			<Text id="slotTitle:launcher">"Launcher Slot"</Text>
			<Text id="slotDesc:launcher">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for a launcher. "
							"(However, some launchers do not require a free slot to be installed.)"
							)
							
					"Your ship does not have a missile launcher installed."
					)
			</Text>
			
			<Text id="slotTitle:weapon">"Weapon Slot"</Text>
			<Text id="slotDesc:weapon">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for weapons. "
							"(However, some weapons do not require a free slot to be installed.)"
							)
							
					(eq (@ gData 'slotsAvail) 1)
						(cat
							"Your ship has a free slot available for installing weapons."
							)
							
					(cat
						"Your ship has " (@ gData 'slotsAvail) " free slots available for installing weapons."
						)
					)
			</Text>
		</Language>
	</DockScreen>
	
<!-- REPLACE ARMOR SCREEN ======================================================

	This screen allows the player to replace armor from a station. It requires 
	the station to use the <ReplaceArmor> directive in its <Trade> section.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

-->

	<DockScreen UNID="&dsRPGReplaceArmor;"
			type=				"itemPicker"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			>
			(block (
				(criteria (if (@ gData 'criteria) (@ gData 'criteria) "aU"))
				(armorSeg (@ gData 'armorSeg))
				(armorToReplace (shpGetArmor gPlayerShip armorSeg))
				)
				
				(scrSetListFilter gScreen (lambda (theItem)
					(and
						(itmMatches theItem criteria)
						(or
							(not armorToReplace)
							(not (itmIsEqual theItem armorToReplace 'ignoreInstalled))
							)
						)
					))
				)
		</ListOptions>

		<Panes>
			<Default
					desc=	"Pick an armor segment to install.">

				<OnPaneInit>
					(block (
						(armorSeg (@ gData 'armorSeg))
						(thisItem (scrGetItem gScreen))
						(oldItem (shpGetArmor gPlayerShip armorSeg))
						(currencyUsed (objGetDefaultCurrency gSource))
						
						(canInstall True)
						)
						
						;	Show the current armor
						
						(scrSetControlValue gScreen 'currentItem {
							source: gPlayerShip
							item: oldItem
							})
							
						;	Status
						
						(if thisItem
							(block (desc cargoNeeded)
								(setq gResult (shpCanInstallArmor gPlayerShip thisItem armorSeg))
								(setq gInstallStatus (objGetItemProperty gSource thisItem 'installItemStatus))
								(setq gCost (@ gInstallStatus 'price))
								(setq cargoNeeded (subtract (itmGetMass (shpGetArmor gPlayerShip armorSeg)) (itmGetMass thisItem)))

								(switch
									(eq gResult 1)
										(block Nil
											(setq desc (cat (itmGetName thisItem 3) " are too heavy for your ship's hull."))
											(setq canInstall Nil)
											)

									(and (@ gData 'checkMilitaryID) 
											(itmHasModifier thisItem "Military")
											(not (objGetItems gPlayerShip "*+MilitaryID"))
											)
										(block Nil
											(setq desc (cat "You must have a military ID to install " (itmGetName thisItem 0x80) "."))
											(setq canInstall Nil)
											)
											
									(and (@ gData 'checkMilitaryID) 
											(itmHasModifier thisItem "Illegal")
											)
										(block Nil
											(setq desc "We do not install illegal armor segments.")
											(setq canInstall Nil)
											)
											
									(not (isint gResult))
										(block Nil
											(setq desc gResult)
											(setq canInstall Nil)
											)

									(not (eq gResult 0))
										(block Nil
											(setq desc "This armor segment cannot be installed.")
											(setq canInstall Nil)
											)

									(not (@ gInstallStatus 'canInstall))
										(block Nil
											(if (@ gInstallStatus 'descID)
												(setq desc (objTranslate gSource (@ gInstallStatus 'descID) { item:thisItem targetObj:gPlayerShip }))
												(setq desc (cat "We do not have the technology to install " (itmGetName thisItem 0x80) "."))
												)
											(setq canInstall Nil)
											)

									(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(setq desc "There is no room in your cargo hold to store the old armor segment.")
											(setq canInstall Nil)
											)

									(gr gCost (objGetBalance gPlayerShip currencyUsed))
										(block Nil
											(setq desc 
												(cat "We can install " (itmGetName thisItem 0x04) " for " (fmtCurrency currencyUsed gCost) ". Unfortunately, you cannot afford this cost.")
												)
											(setq canInstall Nil)
											)

									(eq gCost 0)
										(setq desc
											(cat "We can install " (itmGetName thisItem 0x04) " free of charge.")
											)

									(setq desc
										(cat "We can install " (itmGetName thisItem 0x04) " for " (fmtCurrency currencyUsed gCost) ".")
										)
									)
									
								;	If the new segment is of a lower level than the current
								;	segment, then warn the player
								
								(if canInstall
									(switch
										(gr (itmGetLevel (shpGetArmor gPlayerShip armorSeg)) (itmGetLevel thisItem))
											(scrSetControlValue gScreen 'descWarning
												(cat
													"Note: Your currently installed " (itmGetName (shpGetArmor gPlayerShip armorSeg) 0x80)
													" is higher level."
													)
												)
										)
									)

								(scrSetDesc gScreen desc)
								)

							(block Nil
								(scrSetDesc gScreen "You do not have any armor segments in your cargo hold.")
								(setq canInstall Nil)
								)
							)

						(scrEnableAction gScreen 0 canInstall)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>

				<Actions>
					<Action name="Install this Armor" default="1" key="I" >
						(block (thisItem currencyUsed)
							(setq thisItem (scrGetItem gScreen))
							(setq currencyUsed (objGetDefaultCurrency gSource))

							(if (and thisItem (geq (objGetBalance gPlayerShip currencyUsed) gCost))
								(block Nil
									(shpInstallArmor gPlayerShip thisItem (@ gData 'armorSeg))
									(objCharge gPlayerShip currencyUsed gCost)
									
									(scrExitScreen gScreen)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- UPGRADE ARMOR SCREEN ======================================================

	This screen allows the player to buy and replace and armor segment from the
	current station.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

-->

	<DockScreen UNID="&dsRPGUpgradeArmor;"
			type=				"itemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
				dataFrom=	"source"
				list=		"*"
				>
			(scrSetListFilter gScreen (lambda (theItem)
				(and
					(itmMatches theItem "aU")
					(objGetSellPrice gSource theItem)
					(objGetArmorReplacePrice gSource theItem)
					(geq (itmGetLevel theItem) (itmGetLevel (shpGetArmor gPlayerShip (@ gData 'armorSeg))))
					)
				))
		</ListOptions>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(armorSeg (@ gData 'armorSeg))
						(thisItem (scrGetItem gScreen))
						(oldItem (shpGetArmor gPlayerShip armorSeg))
						(currencyUsed (objGetDefaultCurrency gSource))
						
						(result
							(if thisItem
								(objCanInstallItem gPlayerShip thisItem armorSeg)
								(list Nil 'cannotInstall "The station doesn't have any armor segments to install.")
								)
							)
						(resultCode (@ result 1))
						
						(totalCost (add (objGetSellPrice gSource thisItem) (objGetArmorReplacePrice gSource thisItem)))
						(cargoNeeded (itmGetMass oldItem))

						(desc Nil)
						(canInstall Nil)
						)
						
						;	Show the current armor
						
						(scrSetControlValue gScreen 'currentItem {
							source: gPlayerShip
							item: oldItem
							})
						
						;	Tell the player whether we can install the selected item and how 
						;	much it will cost.
						
						(switch
							(eq resultCode 'armorTooHeavy)
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descArmorTooHeavy { armor:thisItem }))
								
							(eq resultCode 'cannotInstall)
								(setq desc (@ result 2))
								
							(and (@ gData 'checkMilitaryID) 
									(itmHasModifier thisItem "Military")
									(not (objGetItems gPlayerShip "*+MilitaryID"))
									)
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descNeedMilitaryID { armor:thisItem }))
								
							(and (@ gData 'checkMilitaryID) 
									(itmHasModifier thisItem "Illegal")
									)
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descArmorIllegal { armor:thisItem }))
								
							(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descNotEnoughRoom))
							
							(gr totalCost (objGetBalance gPlayerShip currencyUsed))
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descCannotAfford { armor:thisItem cost:(fmtCurrency currencyUsed totalCost) }))
								
							(eq totalCost 0)
								(block Nil
									(setq desc (typTranslate &dsRPGUpgradeArmor; 'descFreeInstall { armor:thisItem }))
									(scrSetData gScreen 'cost 0)
									(setq canInstall True)
									)
								
							;	Otherwise, we're OK to install
								
							(block Nil
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descInstall { armor:thisItem cost:(fmtCurrency currencyUsed totalCost) }))
								(scrSetData gScreen 'cost totalCost)
								(setq canInstall True)
								)
							)
							
						;	Set the description
						
						(scrSetDesc gScreen desc)
						
						;	Enable/disable actions
						
						(scrEnableAction gScreen 'actionBuyAndInstall canInstall)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
				</Controls>
				
				<Actions>
					<Action id="actionBuyAndInstall" default="1">
						(block (thisItem currencyUsed)
							(setq thisItem (scrGetItem gScreen))
							(setq currencyUsed (objGetDefaultCurrency gSource))
							
							(objRemoveItem gSource thisItem 1)
							(objAddItem gPlayerShip thisItem 1)

							(shpInstallArmor gPlayerShip thisItem (@ gData 'armorSeg))
							(objCharge gPlayerShip currencyUsed (scrGetData gScreen 'cost))

							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	
		<Language>
			<Text id="actionBuyAndInstall">"[B]uy and Install"</Text>

			<Text id="descArmorTooHeavy">
				(cat (itmGetName (@ gData 'armor) 0x03) " are too heavy for your ship's hull.")
			</Text>
			<Text id="descNeedMilitaryID">
				(cat "You must have a military ID to install " (itmGetName (@ gData 'armor) 0x80) ".")
			</Text>
			<Text id="descArmorIllegal">
				(cat "We do not install illegal armor.")
			</Text>
			<Text id="descNotEnoughRoom">
				(cat
					"There isn't enough room in your cargo hold to store your old armor segment. "
					"Sell or jettison cargo to make room."
					)
			</Text>
			<Text id="descCannotAfford">
				(cat "We can install " (itmGetName (@ gData 'armor) 0x04) " for " (@ gData 'cost) ". Unfortunately, you cannot afford the cost.")))
			</Text>
			<Text id="descFreeInstall">
				(cat "We can install " (itmGetName (@ gData 'armor) 0x04) " free of charge.")
			</Text>
			<Text id="descInstall">
				(cat "We can install " (itmGetName (@ gData 'armor) 0x04) " for " (@ gData 'cost) ".")))
			</Text>
		</Language>
	</DockScreen>

<!-- BASE CLASSES -->

	<DockScreen unid="&dsRPGDockServicesBase;"
			inherit=		"&dsDockScreenBase;"
			>
		<Panes>
			<RefuelShip>
				<OnPaneInit>
					(block (
						(currencyUsed (objGetDefaultCurrency gSource))
						)
						
						(scrSetControlValue gScreen 'currentItem {
							source: gSource
							item: (scrGetData gScreen 'fuelItem)
							})
							
						(scrSetDescTranslate gScreen 'descRefuelConfirm {
							item: (scrGetData gScreen 'fuelItem) 
							cost: (fmtCurrency currencyUsed (scrGetData gScreen 'fuelCost))
							totalCost: (fmtCurrency currencyUsed (multiply (scrGetData gScreen 'fuelCost) (scrGetData gScreen 'fuelMax)))
							needed: (scrGetData gScreen 'fuelNeeded)
							afford: (scrGetData gScreen 'fuelAfford)
							})
							
						(scrSetCounter gScreen (scrGetData gScreen 'fuelMax))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Counter id="counter"/>
				</Controls>

				<Actions>
					<Action id="actionRefuel" default="1">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count (scrGetData gScreen 'fuelMax))
								(scrSetCounter gScreen (scrGetData gScreen 'fuelMax))
								
								(block (itemsToUse currencyUsed)
									(setq itemsToUse (itmCreate (itmGetType (scrGetData gScreen 'fuelItem)) count))
									(setq currencyUsed (objGetDefaultCurrency gSource))
									
									(shpRefuelFromItem gPlayerShip itemsToUse)
									
									(objCharge gPlayerShip currencyUsed (multiply count (scrGetData gScreen 'fuelCost)))
									(plyRecordBuyItem gPlayer itemsToUse currencyUsed (multiply count (scrGetData gScreen 'fuelCost)))
									
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</RefuelShip>
			
			<RemoveDevice>
				<OnPaneInit>
					(block Nil
						(scrSetControlValue gScreen 'currentItem {
							source: gPlayerShip
							item: (scrGetItem gScreen)
							})
							
						(scrSetDescTranslate gScreen 'descRemoveDeviceConfirm {
							item: (scrGetItem gScreen) 
							cost: 
								(if (gr (scrGetData gScreen 'costToRemove) 0)
									(fmtCurrency (objGetDefaultCurrency gSource) (scrGetData gScreen 'costToRemove))
									)
							})
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
				</Controls>

				<Actions>
					<Action id="actionRemove" default="1">
						(block Nil
							(shpRemoveDevice gPlayerShip (scrGetItem gScreen))
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) (scrGetData gScreen 'costToRemove))

							(scrRefreshScreen gScreen)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</RemoveDevice>
		</Panes>
		
		<Language>
			<Text id="actionArmor:defaultArmorInstall">
				(cat
					"We install armor segments up to level " (@ gData 'maxLevel) "."
					)
			</Text>
			<Text id="actionArmor:defaultArmorRepair">
				(cat
					"We repair armor up to level " (@ gData 'maxLevel) "."
					)
			</Text>
			<Text id="actionArmor:defaultArmorUpgrade">
				(cat
					"We sell armor upgrades up to level " (@ gData 'maxLevel) "."
					)
			</Text>
			<Text id="actionArmor:defaultShieldsInstall">
				(cat
					"We install shields up to level " (@ gData 'maxLevel) "."
					)
			</Text>
			<Text id="actionArmor:defaultShieldsUpgrade">
				(cat
					"We sell shield upgrades up to level " (@ gData 'maxLevel) "."
					)
			</Text>
			<Text id="actionArmor:noTechToRepair">
				(cat
					"We do not have the technology to repair your armor."
					)
			</Text>
			<Text id="actionArmor:nothing">"We don't upgrade or install armor."</Text>
			<Text id="actionArmor:shipConfig">"View and manage armor and shields."</Text>
			
			<Text id="actionBuyAmmo:ammoForSale">
				(cat "We have ammo in stock for " (itmGetName (@ gData 'item) 0x04) ".")
			</Text>
			<Text id="actionBuyAmmo:noAmmoToBuy">
				(cat "We do not have ammo for " (itmGetName (@ gData 'item) 0x04) ".")
			</Text>
			<Text id="actionBuyMissiles:missilesForSale">
				(cat "We have missiles in stock for " (itmGetName (@ gData 'item) 0x04) ".")
			</Text>
			<Text id="actionBuyMissiles:noMissilesToBuy">
				(cat "We do not have missiles for " (itmGetName (@ gData 'item) 0x04) ".")
			</Text>
			
			<Text id="actionInstall:noItemInCargo">
				(switch
					(= (@ gData 'category) 'cargoHold)
						"You do not have any cargo expansions in your cargo hold."
						
					(= (@ gData 'category) 'drive)
						"You do not have any drive upgrades in your cargo hold."
						
					(= (@ gData 'category) 'launcher)
						"You do not have any launchers in your cargo hold."
						
					(= (@ gData 'category) 'reactor)
						"You do not have any reactors in your cargo hold."
						
					(= (@ gData 'category) 'shields)
						"You do not have any shield generators in your cargo hold."
						
					(= (@ gData 'category) 'weapon)
						"You do not have any weapons in your cargo hold."
						
					"You do not have any devices in your cargo hold."
					)
			</Text>
			<Text id="actionInstall:defaultAbility">
				(cat "We install devices up to tech level " (objGetProperty (@ gData 'dockObj) 'installDeviceMaxLevel) ".")
			</Text>
			<Text id="actionInstall:upgradeInstallOnly">"Sorry, we only install or remove items as part of an upgrade purchase."</Text>
			
			<Text id="actionRefuel:cantAfford">
				(switch
					(= (@ gData 'afford) 0)
						(cat "We can refuel your ship for " (@ gData 'cost) " per " (itmGetName (@ gData 'item) 0x00) ". Unfortunately, you cannot afford even one.")
					
					(cat "We can refuel your ship for " (@ gData 'cost) " per " (itmGetName (@ gData 'item) 0x00) ".")
					)
			</Text>
			<Text id="actionRefuel:noRefuel">
				"We do not sell fuel."
			</Text>
			<Text id="actionRefuel:noCompatibleFuel">
				"We do not have fuel compatible with your ship's reactor."
			</Text>
			<Text id="actionRefuel:noFuelNeeded">
				"Your ship is fully fueled."
			</Text>
			<Text id="actionRefuel:freeRefuel">
				(switch
					(= (@ gData 'needed) 0)
						"We can refuel you free of charge, but your ship does not need any fuel."
						
					(= (@ gData 'needed) 1)
						(cat "We can refuel you free of charge. Your ship needs one " (itmGetName (@ gData 'item) 0x00) ".")
						
					(cat "We can refuel you free of charge. Your ship needs " (@ gData 'needed) " " (itmGetName (@ gData 'item) 0x02) ".")
					)
			</Text>
			<Text id="actionRefuel:refuel">
				(cat "We can refuel your ship for " (@ gData 'cost) " per " (itmGetName (@ gData 'item) 0x00) ".")
			</Text>
				
			<Text id="actionRemove:cannotAfford">
				(cat "The device can be removed for " (@ gData 'cost) ". Unfortunately, you cannot afford the cost.")
			</Text>
			<Text id="actionRemove:cannotRemove">"The device cannot be removed."</Text>
			<Text id="actionRemove:freeRemove">"The device can be removed free of charge."</Text>
			<Text id="actionRemove:noRoomInCargo">"The device cannot be removed because there is no room in your cargo hold to store it."</Text>
			<Text id="actionRemove:remove">(cat "The device can be removed for " (@ gData 'cost) ".")</Text>
			<Text id="actionRemove:upgradeInstallOnly">"Sorry, we only install or remove items as part of an upgrade purchase."</Text>
			<Text id="actionRemove:noTech">(cat "We do not have the technology to remove a level " (itmGetLevel (@ gData 'item)) " device.")</Text>
			
			<Text id="actionReplace:cannotReplace">"The device cannot be replaced."</Text>
			<Text id="actionReplace:defaultAbility">
				(switch
					(and (= (@ gData 'category) 'armor) (@ gData 'maxLevel))
						(cat 
							"We install armor up to tech level " (objGetProperty (@ gData 'dockObj) 'installArmorMaxLevel) 
							" (but you don't have anything better than level " (@ gData 'maxLevel) " in your cargo hold)."
							)
							
					(@ gData 'maxLevel)
						(cat 
							"We install devices up to tech level " (objGetProperty (@ gData 'dockObj) 'installArmorMaxLevel)
							" (but you don't have anything better than level " (@ gData 'maxLevel) " in your cargo hold)."
							)
						
					(= (@ gData 'category) 'armor)
						(cat "We install armor up to tech level " (objGetProperty (@ gData 'dockObj) 'installArmorMaxLevel) ".")
						
					(cat "We install devices up to tech level " (objGetProperty (@ gData 'dockObj) 'installDeviceMaxLevel) ".")
					)
			</Text>
			<Text id="actionReplace:noItemInCargo">
				(if (= (@ gData 'category) 'armor)
					"There is nothing in your cargo hold to replace this armor segment with."
					"There is nothing in your cargo hold to replace this device with."
					)
			</Text>
			<Text id="actionReplace:noTech">(cat "We do not have the technology to replace a level " (itmGetLevel (@ gData 'item)) " device.")</Text>
			<Text id="actionReplace:upgradeInstallOnly">"Sorry, we only install or remove items as part of an upgrade purchase."</Text>
			
			<Text id="actionUpgrade:cannotUpgrade">"The device cannot be upgraded."</Text>
			<Text id="actionUpgrade:defaultAbility">
				(switch
					(= (@ gData 'category) 'armor)
						(cat "We have armor segments in stock up to tech level " (@ gData 'maxLevel))
					
					(= (@ gData 'category) 'cargoHold)
						(cat "We have cargo expansions in stock up to tech level " (@ gData 'maxLevel))
						
					(= (@ gData 'category) 'drive)
						(cat "We have drive upgrades in stock up to tech level " (@ gData 'maxLevel))
						
					(= (@ gData 'category) 'launcher)
						(cat "We have launchers in stock up to tech level " (@ gData 'maxLevel))
						
					(= (@ gData 'category) 'reactor)
						(cat "We have reactors in stock up to tech level " (@ gData 'maxLevel))
						
					(= (@ gData 'category) 'shields)
						(cat "We have shield generators in stock up to tech level " (@ gData 'maxLevel))
						
					(= (@ gData 'category) 'weapon)
						(cat "We have weapons in stock up to tech level " (@ gData 'maxLevel))
						
					(cat "We have devices in stock up to tech level " (@ gData 'maxLevel))
					)
			</Text>
			<Text id="actionUpgrade:noItemForSale">
				(switch
					(= (@ gData 'category) 'armor)
						"We do not have any armor segments for sale."
					
					(= (@ gData 'category) 'cargoHold)
						"We do not have any cargo expansions for sale."
						
					(= (@ gData 'category) 'drive)
						"We do not have any drive upgrades for sale."
						
					(= (@ gData 'category) 'launcher)
						"We do not have any launchers for sale."
						
					(= (@ gData 'category) 'reactor)
						"We do not have any reactors for sale."
						
					(= (@ gData 'category) 'shields)
						"We do not have any shield generators for sale."
						
					(= (@ gData 'category) 'weapon)
						"We do not have any weapons for sale."
						
					"We do not have any devices for sale."
					)
			</Text>
			<Text id="actionUpgrade:noItemUpgrade">
				(switch
					(= (@ gData 'category) 'armor)
						(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " armor.")
					
					(= (@ gData 'category) 'cargoHold)
						(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " cargo expansion.")
						
					(= (@ gData 'category) 'drive)
						(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " drive upgrade.")
						
					(= (@ gData 'category) 'launcher)
						(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " launcher.")
						
					(= (@ gData 'category) 'reactor)
						(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " reactor.")
						
					(= (@ gData 'category) 'shields)
						(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " shields.")
						
					(= (@ gData 'category) 'weapon)
						(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " weapon.")
						
					(cat "We do not have anything better than your level " (itmGetLevel (@ gData 'item)) " device.")
					)
			</Text>
			<Text id="actionUpgrade:noTech">(cat "We do not have the technology to upgrade a level " (itmGetLevel (@ gData 'item)) " device.")</Text>
		
			<Text id="descRefuelConfirm">
				(switch
					(and (gr (@ gData 'needed) (@ gData 'afford)) (= (@ gData 'afford) 1))
						(cat "Each " (itmGetName (@ gData 'item) 0x00) " costs " (@ gData 'cost) ". You can only afford a single one.")
						
					(gr (@ gData 'needed) (@ gData 'afford))
						(cat "Each " (itmGetName (@ gData 'item) 0x00) " costs " (@ gData 'cost) ". "
						"You can only afford " (@ gData 'afford) " " (itmGetName (@ gData 'item) 0x02) ". How many do you wish to buy?"
						)

					(= (@ gData 'needed) 1)
						(cat "Your ship needs one " (itmGetName (@ gData 'item) 0x00) " for a total cost of " (@ gData 'cost) ".")
						
					(cat "Your ship needs " (@ gData 'needed) " " (itmGetName (@ gData 'item) 0x02) ". "
						"Each " (itmGetName (@ gData 'item) 0x00) " costs " (@ gData 'cost) " (" (@ gData 'totalCost) " total). How many do you wish to buy?"
						)
					)
			</Text>
			
			<Text id="descRemoveDeviceConfirm">
				(switch
					(not (@ gData 'cost))
						(cat "We can remove " (itmGetName (@ gData 'item) 0x04) " free of charge. Are you sure you wish to continue?")
						
					(cat "We can remove " (itmGetName (@ gData 'item) 0x04) " for " (@ gData 'cost) ". Are you sure you wish to continue?")
					)
			</Text>
		</Language>
	</DockScreen>
	
</TranscendenceModule>
